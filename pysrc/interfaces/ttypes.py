#
# Autogenerated by Thrift Compiler (0.15.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class TransactionException(TException):
    """
    Attributes:
     - exc

    """


    def __init__(self, exc=None,):
        super(TransactionException, self).__setattr__('exc', exc)

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash((self.exc, ))

    @classmethod
    def read(cls, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and cls.thrift_spec is not None:
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        exc = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    exc = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            exc=exc,
        )

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TransactionException')
        if self.exc is not None:
            oprot.writeFieldBegin('exc', TType.STRING, 1)
            oprot.writeString(self.exc.encode('utf-8') if sys.version_info[0] == 2 else self.exc)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AssertException(TException):
    """
    Attributes:
     - error_message

    """


    def __init__(self, error_message=None,):
        super(AssertException, self).__setattr__('error_message', error_message)

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash((self.error_message, ))

    @classmethod
    def read(cls, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and cls.thrift_spec is not None:
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        error_message = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    error_message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            error_message=error_message,
        )

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AssertException')
        if self.error_message is not None:
            oprot.writeFieldBegin('error_message', TType.STRING, 1)
            oprot.writeString(self.error_message.encode('utf-8') if sys.version_info[0] == 2 else self.error_message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ActionArguments(object):
    """
    Attributes:
     - raw_args
     - json_args

    """


    def __init__(self, raw_args=None, json_args=None,):
        self.raw_args = raw_args
        self.json_args = json_args

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.raw_args = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.json_args = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ActionArguments')
        if self.raw_args is not None:
            oprot.writeFieldBegin('raw_args', TType.STRING, 1)
            oprot.writeBinary(self.raw_args)
            oprot.writeFieldEnd()
        if self.json_args is not None:
            oprot.writeFieldBegin('json_args', TType.STRING, 2)
            oprot.writeString(self.json_args.encode('utf-8') if sys.version_info[0] == 2 else self.json_args)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Action(object):
    """
    Attributes:
     - account
     - action
     - permissions
     - arguments

    """


    def __init__(self, account=None, action=None, permissions=None, arguments=None,):
        self.account = account
        self.action = action
        self.permissions = permissions
        self.arguments = arguments

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.account = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.action = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.permissions = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.arguments = ActionArguments()
                    self.arguments.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Action')
        if self.account is not None:
            oprot.writeFieldBegin('account', TType.STRING, 1)
            oprot.writeString(self.account.encode('utf-8') if sys.version_info[0] == 2 else self.account)
            oprot.writeFieldEnd()
        if self.action is not None:
            oprot.writeFieldBegin('action', TType.STRING, 2)
            oprot.writeString(self.action.encode('utf-8') if sys.version_info[0] == 2 else self.action)
            oprot.writeFieldEnd()
        if self.permissions is not None:
            oprot.writeFieldBegin('permissions', TType.STRING, 3)
            oprot.writeString(self.permissions.encode('utf-8') if sys.version_info[0] == 2 else self.permissions)
            oprot.writeFieldEnd()
        if self.arguments is not None:
            oprot.writeFieldBegin('arguments', TType.STRUCT, 4)
            self.arguments.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Uint64(object):
    """
    Attributes:
     - rawValue

    """


    def __init__(self, rawValue=None,):
        self.rawValue = rawValue

    def into(value):
        assert len(value.rawValue) == 8, 'bad Uint64'
        return int.from_bytes(value.rawValue, 'little')

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.rawValue = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Uint64')
        if self.rawValue is not None:
            oprot.writeFieldBegin('rawValue', TType.STRING, 1)
            oprot.writeBinary(self.rawValue)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DataBuffer(object):
    """
    Attributes:
     - size
     - buffer

    """


    def __init__(self, size=None, buffer=None,):
        self.size = size
        self.buffer = buffer

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.size = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.buffer = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DataBuffer')
        if self.size is not None:
            oprot.writeFieldBegin('size', TType.I32, 1)
            oprot.writeI32(self.size)
            oprot.writeFieldEnd()
        if self.buffer is not None:
            oprot.writeFieldBegin('buffer', TType.STRING, 2)
            oprot.writeBinary(self.buffer)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class NextPreviousReturn(object):
    """
    Attributes:
     - iterator
     - primary

    """


    def __init__(self, iterator=None, primary=None,):
        self.iterator = iterator
        self.primary = primary

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.iterator = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.primary = Uint64()
                    self.primary.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('NextPreviousReturn')
        if self.iterator is not None:
            oprot.writeFieldBegin('iterator', TType.I32, 1)
            oprot.writeI32(self.iterator)
            oprot.writeFieldEnd()
        if self.primary is not None:
            oprot.writeFieldBegin('primary', TType.STRUCT, 2)
            self.primary.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class IteratorPrimaryReturn(object):
    """
    Attributes:
     - iterator
     - primary

    """


    def __init__(self, iterator=None, primary=None,):
        self.iterator = iterator
        self.primary = primary

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.iterator = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.primary = Uint64()
                    self.primary.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('IteratorPrimaryReturn')
        if self.iterator is not None:
            oprot.writeFieldBegin('iterator', TType.I32, 1)
            oprot.writeI32(self.iterator)
            oprot.writeFieldEnd()
        if self.primary is not None:
            oprot.writeFieldBegin('primary', TType.STRUCT, 2)
            self.primary.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FindPrimaryReturn(object):
    """
    Attributes:
     - iterator
     - secondary

    """


    def __init__(self, iterator=None, secondary=None,):
        self.iterator = iterator
        self.secondary = secondary

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.iterator = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.secondary = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FindPrimaryReturn')
        if self.iterator is not None:
            oprot.writeFieldBegin('iterator', TType.I32, 1)
            oprot.writeI32(self.iterator)
            oprot.writeFieldEnd()
        if self.secondary is not None:
            oprot.writeFieldBegin('secondary', TType.STRING, 2)
            oprot.writeBinary(self.secondary)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FindSecondaryReturn(object):
    """
    Attributes:
     - iterator
     - primary

    """


    def __init__(self, iterator=None, primary=None,):
        self.iterator = iterator
        self.primary = primary

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.iterator = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.primary = Uint64()
                    self.primary.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FindSecondaryReturn')
        if self.iterator is not None:
            oprot.writeFieldBegin('iterator', TType.I32, 1)
            oprot.writeI32(self.iterator)
            oprot.writeFieldEnd()
        if self.primary is not None:
            oprot.writeFieldBegin('primary', TType.STRUCT, 2)
            self.primary.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LowerBoundUpperBoundReturn(object):
    """
    Attributes:
     - iterator
     - secondary
     - primary

    """


    def __init__(self, iterator=None, secondary=None, primary=None,):
        self.iterator = iterator
        self.secondary = secondary
        self.primary = primary

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.iterator = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.secondary = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.primary = Uint64()
                    self.primary.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LowerBoundUpperBoundReturn')
        if self.iterator is not None:
            oprot.writeFieldBegin('iterator', TType.I32, 1)
            oprot.writeI32(self.iterator)
            oprot.writeFieldEnd()
        if self.secondary is not None:
            oprot.writeFieldBegin('secondary', TType.STRING, 2)
            oprot.writeBinary(self.secondary)
            oprot.writeFieldEnd()
        if self.primary is not None:
            oprot.writeFieldBegin('primary', TType.STRUCT, 3)
            self.primary.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetResourceLimitsReturn(object):
    """
    Attributes:
     - ram_bytes
     - net_weight
     - cpu_weight

    """


    def __init__(self, ram_bytes=None, net_weight=None, cpu_weight=None,):
        self.ram_bytes = ram_bytes
        self.net_weight = net_weight
        self.cpu_weight = cpu_weight

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.ram_bytes = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.net_weight = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.cpu_weight = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetResourceLimitsReturn')
        if self.ram_bytes is not None:
            oprot.writeFieldBegin('ram_bytes', TType.I64, 1)
            oprot.writeI64(self.ram_bytes)
            oprot.writeFieldEnd()
        if self.net_weight is not None:
            oprot.writeFieldBegin('net_weight', TType.I64, 2)
            oprot.writeI64(self.net_weight)
            oprot.writeFieldEnd()
        if self.cpu_weight is not None:
            oprot.writeFieldBegin('cpu_weight', TType.I64, 3)
            oprot.writeI64(self.cpu_weight)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(TransactionException)
TransactionException.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'exc', 'UTF8', None, ),  # 1
)
all_structs.append(AssertException)
AssertException.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'error_message', 'UTF8', None, ),  # 1
)
all_structs.append(ActionArguments)
ActionArguments.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'raw_args', 'BINARY', None, ),  # 1
    (2, TType.STRING, 'json_args', 'UTF8', None, ),  # 2
)
all_structs.append(Action)
Action.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'account', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'action', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'permissions', 'UTF8', None, ),  # 3
    (4, TType.STRUCT, 'arguments', [ActionArguments, None], None, ),  # 4
)
all_structs.append(Uint64)
Uint64.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'rawValue', 'BINARY', None, ),  # 1
)
all_structs.append(DataBuffer)
DataBuffer.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'size', None, None, ),  # 1
    (2, TType.STRING, 'buffer', 'BINARY', None, ),  # 2
)
all_structs.append(NextPreviousReturn)
NextPreviousReturn.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'iterator', None, None, ),  # 1
    (2, TType.STRUCT, 'primary', [Uint64, None], None, ),  # 2
)
all_structs.append(IteratorPrimaryReturn)
IteratorPrimaryReturn.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'iterator', None, None, ),  # 1
    (2, TType.STRUCT, 'primary', [Uint64, None], None, ),  # 2
)
all_structs.append(FindPrimaryReturn)
FindPrimaryReturn.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'iterator', None, None, ),  # 1
    (2, TType.STRING, 'secondary', 'BINARY', None, ),  # 2
)
all_structs.append(FindSecondaryReturn)
FindSecondaryReturn.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'iterator', None, None, ),  # 1
    (2, TType.STRUCT, 'primary', [Uint64, None], None, ),  # 2
)
all_structs.append(LowerBoundUpperBoundReturn)
LowerBoundUpperBoundReturn.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'iterator', None, None, ),  # 1
    (2, TType.STRING, 'secondary', 'BINARY', None, ),  # 2
    (3, TType.STRUCT, 'primary', [Uint64, None], None, ),  # 3
)
all_structs.append(GetResourceLimitsReturn)
GetResourceLimitsReturn.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'ram_bytes', None, None, ),  # 1
    (2, TType.I64, 'net_weight', None, None, ),  # 2
    (3, TType.I64, 'cpu_weight', None, None, ),  # 3
)
fix_spec(all_structs)
del all_structs
