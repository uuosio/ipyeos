#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.15.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from interfaces import IPCChainTester
from interfaces.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void init_vm_api()')
    print('  void init_apply_request()')
    print('  void enable_debug_contract(i32 id, string contract, bool enable)')
    print('  bool is_debug_contract_enabled(i32 id, string contract)')
    print('  string pack_abi(string abi)')
    print('  string pack_action_args(i32 id, string contract, string action, string action_args)')
    print('  string unpack_action_args(i32 id, string contract, string action, string raw_args)')
    print('  i32 new_chain()')
    print('  i32 free_chain(i32 id)')
    print('  void produce_block(i32 id)')
    print('  string push_action(i32 id, string account, string action, string arguments, string permissions)')
    print('  string push_actions(i32 id,  actions)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = IPCChainTester.Client(protocol)
transport.open()

if cmd == 'init_vm_api':
    if len(args) != 0:
        print('init_vm_api requires 0 args')
        sys.exit(1)
    pp.pprint(client.init_vm_api())

elif cmd == 'init_apply_request':
    if len(args) != 0:
        print('init_apply_request requires 0 args')
        sys.exit(1)
    pp.pprint(client.init_apply_request())

elif cmd == 'enable_debug_contract':
    if len(args) != 3:
        print('enable_debug_contract requires 3 args')
        sys.exit(1)
    pp.pprint(client.enable_debug_contract(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'is_debug_contract_enabled':
    if len(args) != 2:
        print('is_debug_contract_enabled requires 2 args')
        sys.exit(1)
    pp.pprint(client.is_debug_contract_enabled(eval(args[0]), args[1],))

elif cmd == 'pack_abi':
    if len(args) != 1:
        print('pack_abi requires 1 args')
        sys.exit(1)
    pp.pprint(client.pack_abi(args[0],))

elif cmd == 'pack_action_args':
    if len(args) != 4:
        print('pack_action_args requires 4 args')
        sys.exit(1)
    pp.pprint(client.pack_action_args(eval(args[0]), args[1], args[2], args[3],))

elif cmd == 'unpack_action_args':
    if len(args) != 4:
        print('unpack_action_args requires 4 args')
        sys.exit(1)
    pp.pprint(client.unpack_action_args(eval(args[0]), args[1], args[2], args[3],))

elif cmd == 'new_chain':
    if len(args) != 0:
        print('new_chain requires 0 args')
        sys.exit(1)
    pp.pprint(client.new_chain())

elif cmd == 'free_chain':
    if len(args) != 1:
        print('free_chain requires 1 args')
        sys.exit(1)
    pp.pprint(client.free_chain(eval(args[0]),))

elif cmd == 'produce_block':
    if len(args) != 1:
        print('produce_block requires 1 args')
        sys.exit(1)
    pp.pprint(client.produce_block(eval(args[0]),))

elif cmd == 'push_action':
    if len(args) != 5:
        print('push_action requires 5 args')
        sys.exit(1)
    pp.pprint(client.push_action(eval(args[0]), args[1], args[2], args[3], args[4],))

elif cmd == 'push_actions':
    if len(args) != 2:
        print('push_actions requires 2 args')
        sys.exit(1)
    pp.pprint(client.push_actions(eval(args[0]), eval(args[1]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
