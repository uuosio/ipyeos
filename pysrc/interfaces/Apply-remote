#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.15.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from interfaces import Apply
from interfaces.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  i32 end_apply()')
    print('  string get_active_producers()')
    print('  GetResourceLimitsReturn get_resource_limits(Uint64 account)')
    print('  void set_resource_limits(Uint64 account, i64 ram_bytes, i64 net_weight, i64 cpu_weight)')
    print('  i64 set_proposed_producers(string producer_data)')
    print('  i64 set_proposed_producers_ex(Uint64 producer_data_format, string producer_data)')
    print('  bool is_privileged(Uint64 account)')
    print('  void set_privileged(Uint64 account, bool is_priv)')
    print('  void set_blockchain_parameters_packed(string data)')
    print('  string get_blockchain_parameters_packed()')
    print('  void preactivate_feature(string feature_digest)')
    print('  i32 check_transaction_authorization(string trx_data, string pubkeys_data, string perms_data)')
    print('  i32 check_permission_authorization(Uint64 account, Uint64 permission, string pubkeys_data, string perms_data, Uint64 delay_us)')
    print('  i64 get_permission_last_used(Uint64 account, Uint64 permission)')
    print('  i64 get_account_creation_time(Uint64 account)')
    print('  void prints(string cstr)')
    print('  void prints_l(string cstr)')
    print('  void printi(i64 n)')
    print('  void printui(Uint64 n)')
    print('  void printi128(string value)')
    print('  void printui128(string value)')
    print('  void printsf(string value)')
    print('  void printdf(string value)')
    print('  void printqf(string value)')
    print('  void printn(Uint64 name)')
    print('  void printhex(string data)')
    print('  i32 action_data_size()')
    print('  string read_action_data()')
    print('  void require_recipient(Uint64 name)')
    print('  void require_auth(Uint64 name)')
    print('  bool has_auth(Uint64 name)')
    print('  void require_auth2(Uint64 name, Uint64 permission)')
    print('  bool is_account(Uint64 name)')
    print('  void send_inline(string serialized_action)')
    print('  void send_context_free_inline(string serialized_data)')
    print('  Uint64 publication_time()')
    print('  Uint64 current_receiver()')
    print('  void eosio_assert(bool test, string msg)')
    print('  void eosio_assert_message(bool test, string msg)')
    print('  void eosio_assert_code(bool test, Uint64 code)')
    print('  void eosio_exit(i32 code)')
    print('  Uint64 current_time()')
    print('  bool is_feature_activated(string feature_digest)')
    print('  Uint64 get_sender()')
    print('  void assert_sha256(string data, string hash)')
    print('  void assert_sha1(string data, string hash)')
    print('  void assert_sha512(string data, string hash)')
    print('  void assert_ripemd160(string data, string hash)')
    print('  string sha256(string data)')
    print('  string sha1(string data)')
    print('  string sha512(string data)')
    print('  string ripemd160(string data)')
    print('  string recover_key(string digest, string sig)')
    print('  void assert_recover_key(string digest, string sig, string pub)')
    print('  void send_deferred(string sender_id, Uint64 payer, string serialized_transaction, i32 replace_existing)')
    print('  i32 cancel_deferred(string sender_id)')
    print('  string read_transaction()')
    print('  i32 transaction_size()')
    print('  i32 tapos_block_num()')
    print('  i32 tapos_block_prefix()')
    print('  i64 expiration()')
    print('  string get_action(i32 _type, i32 index)')
    print('  string get_context_free_data(i32 index)')
    print('  i32 db_store_i64(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, string data)')
    print('  void db_update_i64(i32 iterator, Uint64 payer, string data)')
    print('  void db_remove_i64(i32 iterator)')
    print('  string db_get_i64(i32 iterator)')
    print('  NextPreviousReturn db_next_i64(i32 iterator)')
    print('  NextPreviousReturn db_previous_i64(i32 iterator)')
    print('  i32 db_find_i64(Uint64 code, Uint64 scope, Uint64 table, Uint64 id)')
    print('  i32 db_lowerbound_i64(Uint64 code, Uint64 scope, Uint64 table, Uint64 id)')
    print('  i32 db_upperbound_i64(Uint64 code, Uint64 scope, Uint64 table, Uint64 id)')
    print('  i32 db_end_i64(Uint64 code, Uint64 scope, Uint64 table)')
    print('  i32 db_idx64_store(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, Uint64 secondary)')
    print('  void db_idx64_update(i32 iterator, Uint64 payer, Uint64 secondary)')
    print('  void db_idx64_remove(i32 iterator)')
    print('  NextPreviousReturn db_idx64_next(i32 iterator)')
    print('  NextPreviousReturn db_idx64_previous(i32 iteratory)')
    print('  FindPrimaryReturn db_idx64_find_primary(Uint64 code, Uint64 scope, Uint64 table, Uint64 primary)')
    print('  FindSecondaryReturn db_idx64_find_secondary(Uint64 code, Uint64 scope, Uint64 table, Uint64 secondary)')
    print('  LowerBoundUpperBoundReturn db_idx64_lowerbound(Uint64 code, Uint64 scope, Uint64 table, Uint64 secondary, Uint64 primary)')
    print('  LowerBoundUpperBoundReturn db_idx64_upperbound(Uint64 code, Uint64 scope, Uint64 table, Uint64 secondary, Uint64 primary)')
    print('  i32 db_idx64_end(Uint64 code, Uint64 scope, Uint64 table)')
    print('  i32 db_idx128_store(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, string secondary)')
    print('  void db_idx128_update(i32 iterator, Uint64 payer, string secondary)')
    print('  void db_idx128_remove(i32 iterator)')
    print('  NextPreviousReturn db_idx128_next(i32 iterator)')
    print('  NextPreviousReturn db_idx128_previous(i32 iterator)')
    print('  FindPrimaryReturn db_idx128_find_primary(Uint64 code, Uint64 scope, Uint64 table, Uint64 primary)')
    print('  FindSecondaryReturn db_idx128_find_secondary(Uint64 code, Uint64 scope, Uint64 table, string secondary)')
    print('  LowerBoundUpperBoundReturn db_idx128_lowerbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)')
    print('  LowerBoundUpperBoundReturn db_idx128_upperbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)')
    print('  i32 db_idx128_end(Uint64 code, Uint64 scope, Uint64 table)')
    print('  i32 db_idx256_store(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, string data)')
    print('  void db_idx256_update(i32 iterator, Uint64 payer, string data)')
    print('  void db_idx256_remove(i32 iterator)')
    print('  NextPreviousReturn db_idx256_next(i32 iterator)')
    print('  NextPreviousReturn db_idx256_previous(i32 iterator)')
    print('  FindPrimaryReturn db_idx256_find_primary(Uint64 code, Uint64 scope, Uint64 table, Uint64 primary)')
    print('  FindSecondaryReturn db_idx256_find_secondary(Uint64 code, Uint64 scope, Uint64 table, string data)')
    print('  LowerBoundUpperBoundReturn db_idx256_lowerbound(Uint64 code, Uint64 scope, Uint64 table, string data, Uint64 primary)')
    print('  LowerBoundUpperBoundReturn db_idx256_upperbound(Uint64 code, Uint64 scope, Uint64 table, string data, Uint64 primary)')
    print('  i32 db_idx256_end(Uint64 code, Uint64 scope, Uint64 table)')
    print('  i32 db_idx_double_store(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, string secondary)')
    print('  void db_idx_double_update(i32 iterator, Uint64 payer, string secondary)')
    print('  void db_idx_double_remove(i32 iterator)')
    print('  NextPreviousReturn db_idx_double_next(i32 iterator)')
    print('  NextPreviousReturn db_idx_double_previous(i32 iterator)')
    print('  FindPrimaryReturn db_idx_double_find_primary(Uint64 code, Uint64 scope, Uint64 table, Uint64 primary)')
    print('  FindSecondaryReturn db_idx_double_find_secondary(Uint64 code, Uint64 scope, Uint64 table, string secondary)')
    print('  LowerBoundUpperBoundReturn db_idx_double_lowerbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)')
    print('  LowerBoundUpperBoundReturn db_idx_double_upperbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)')
    print('  i32 db_idx_double_end(Uint64 code, Uint64 scope, Uint64 table)')
    print('  i32 db_idx_long_double_store(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, string secondary)')
    print('  void db_idx_long_double_update(i32 iterator, Uint64 payer, string secondary)')
    print('  void db_idx_long_double_remove(i32 iterator)')
    print('  NextPreviousReturn db_idx_long_double_next(i32 iterator)')
    print('  NextPreviousReturn db_idx_long_double_previous(i32 iterator)')
    print('  FindPrimaryReturn db_idx_long_double_find_primary(Uint64 code, Uint64 scope, Uint64 table, Uint64 primary)')
    print('  FindSecondaryReturn db_idx_long_double_find_secondary(Uint64 code, Uint64 scope, Uint64 table, string secondary)')
    print('  LowerBoundUpperBoundReturn db_idx_long_double_lowerbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)')
    print('  LowerBoundUpperBoundReturn db_idx_long_double_upperbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)')
    print('  i32 db_idx_long_double_end(Uint64 code, Uint64 scope, Uint64 table)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = Apply.Client(protocol)
transport.open()

if cmd == 'end_apply':
    if len(args) != 0:
        print('end_apply requires 0 args')
        sys.exit(1)
    pp.pprint(client.end_apply())

elif cmd == 'get_active_producers':
    if len(args) != 0:
        print('get_active_producers requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_active_producers())

elif cmd == 'get_resource_limits':
    if len(args) != 1:
        print('get_resource_limits requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_resource_limits(eval(args[0]),))

elif cmd == 'set_resource_limits':
    if len(args) != 4:
        print('set_resource_limits requires 4 args')
        sys.exit(1)
    pp.pprint(client.set_resource_limits(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'set_proposed_producers':
    if len(args) != 1:
        print('set_proposed_producers requires 1 args')
        sys.exit(1)
    pp.pprint(client.set_proposed_producers(args[0],))

elif cmd == 'set_proposed_producers_ex':
    if len(args) != 2:
        print('set_proposed_producers_ex requires 2 args')
        sys.exit(1)
    pp.pprint(client.set_proposed_producers_ex(eval(args[0]), args[1],))

elif cmd == 'is_privileged':
    if len(args) != 1:
        print('is_privileged requires 1 args')
        sys.exit(1)
    pp.pprint(client.is_privileged(eval(args[0]),))

elif cmd == 'set_privileged':
    if len(args) != 2:
        print('set_privileged requires 2 args')
        sys.exit(1)
    pp.pprint(client.set_privileged(eval(args[0]), eval(args[1]),))

elif cmd == 'set_blockchain_parameters_packed':
    if len(args) != 1:
        print('set_blockchain_parameters_packed requires 1 args')
        sys.exit(1)
    pp.pprint(client.set_blockchain_parameters_packed(args[0],))

elif cmd == 'get_blockchain_parameters_packed':
    if len(args) != 0:
        print('get_blockchain_parameters_packed requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_blockchain_parameters_packed())

elif cmd == 'preactivate_feature':
    if len(args) != 1:
        print('preactivate_feature requires 1 args')
        sys.exit(1)
    pp.pprint(client.preactivate_feature(args[0],))

elif cmd == 'check_transaction_authorization':
    if len(args) != 3:
        print('check_transaction_authorization requires 3 args')
        sys.exit(1)
    pp.pprint(client.check_transaction_authorization(args[0], args[1], args[2],))

elif cmd == 'check_permission_authorization':
    if len(args) != 5:
        print('check_permission_authorization requires 5 args')
        sys.exit(1)
    pp.pprint(client.check_permission_authorization(eval(args[0]), eval(args[1]), args[2], args[3], eval(args[4]),))

elif cmd == 'get_permission_last_used':
    if len(args) != 2:
        print('get_permission_last_used requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_permission_last_used(eval(args[0]), eval(args[1]),))

elif cmd == 'get_account_creation_time':
    if len(args) != 1:
        print('get_account_creation_time requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_account_creation_time(eval(args[0]),))

elif cmd == 'prints':
    if len(args) != 1:
        print('prints requires 1 args')
        sys.exit(1)
    pp.pprint(client.prints(args[0],))

elif cmd == 'prints_l':
    if len(args) != 1:
        print('prints_l requires 1 args')
        sys.exit(1)
    pp.pprint(client.prints_l(args[0],))

elif cmd == 'printi':
    if len(args) != 1:
        print('printi requires 1 args')
        sys.exit(1)
    pp.pprint(client.printi(eval(args[0]),))

elif cmd == 'printui':
    if len(args) != 1:
        print('printui requires 1 args')
        sys.exit(1)
    pp.pprint(client.printui(eval(args[0]),))

elif cmd == 'printi128':
    if len(args) != 1:
        print('printi128 requires 1 args')
        sys.exit(1)
    pp.pprint(client.printi128(args[0],))

elif cmd == 'printui128':
    if len(args) != 1:
        print('printui128 requires 1 args')
        sys.exit(1)
    pp.pprint(client.printui128(args[0],))

elif cmd == 'printsf':
    if len(args) != 1:
        print('printsf requires 1 args')
        sys.exit(1)
    pp.pprint(client.printsf(args[0],))

elif cmd == 'printdf':
    if len(args) != 1:
        print('printdf requires 1 args')
        sys.exit(1)
    pp.pprint(client.printdf(args[0],))

elif cmd == 'printqf':
    if len(args) != 1:
        print('printqf requires 1 args')
        sys.exit(1)
    pp.pprint(client.printqf(args[0],))

elif cmd == 'printn':
    if len(args) != 1:
        print('printn requires 1 args')
        sys.exit(1)
    pp.pprint(client.printn(eval(args[0]),))

elif cmd == 'printhex':
    if len(args) != 1:
        print('printhex requires 1 args')
        sys.exit(1)
    pp.pprint(client.printhex(args[0],))

elif cmd == 'action_data_size':
    if len(args) != 0:
        print('action_data_size requires 0 args')
        sys.exit(1)
    pp.pprint(client.action_data_size())

elif cmd == 'read_action_data':
    if len(args) != 0:
        print('read_action_data requires 0 args')
        sys.exit(1)
    pp.pprint(client.read_action_data())

elif cmd == 'require_recipient':
    if len(args) != 1:
        print('require_recipient requires 1 args')
        sys.exit(1)
    pp.pprint(client.require_recipient(eval(args[0]),))

elif cmd == 'require_auth':
    if len(args) != 1:
        print('require_auth requires 1 args')
        sys.exit(1)
    pp.pprint(client.require_auth(eval(args[0]),))

elif cmd == 'has_auth':
    if len(args) != 1:
        print('has_auth requires 1 args')
        sys.exit(1)
    pp.pprint(client.has_auth(eval(args[0]),))

elif cmd == 'require_auth2':
    if len(args) != 2:
        print('require_auth2 requires 2 args')
        sys.exit(1)
    pp.pprint(client.require_auth2(eval(args[0]), eval(args[1]),))

elif cmd == 'is_account':
    if len(args) != 1:
        print('is_account requires 1 args')
        sys.exit(1)
    pp.pprint(client.is_account(eval(args[0]),))

elif cmd == 'send_inline':
    if len(args) != 1:
        print('send_inline requires 1 args')
        sys.exit(1)
    pp.pprint(client.send_inline(args[0],))

elif cmd == 'send_context_free_inline':
    if len(args) != 1:
        print('send_context_free_inline requires 1 args')
        sys.exit(1)
    pp.pprint(client.send_context_free_inline(args[0],))

elif cmd == 'publication_time':
    if len(args) != 0:
        print('publication_time requires 0 args')
        sys.exit(1)
    pp.pprint(client.publication_time())

elif cmd == 'current_receiver':
    if len(args) != 0:
        print('current_receiver requires 0 args')
        sys.exit(1)
    pp.pprint(client.current_receiver())

elif cmd == 'eosio_assert':
    if len(args) != 2:
        print('eosio_assert requires 2 args')
        sys.exit(1)
    pp.pprint(client.eosio_assert(eval(args[0]), args[1],))

elif cmd == 'eosio_assert_message':
    if len(args) != 2:
        print('eosio_assert_message requires 2 args')
        sys.exit(1)
    pp.pprint(client.eosio_assert_message(eval(args[0]), args[1],))

elif cmd == 'eosio_assert_code':
    if len(args) != 2:
        print('eosio_assert_code requires 2 args')
        sys.exit(1)
    pp.pprint(client.eosio_assert_code(eval(args[0]), eval(args[1]),))

elif cmd == 'eosio_exit':
    if len(args) != 1:
        print('eosio_exit requires 1 args')
        sys.exit(1)
    pp.pprint(client.eosio_exit(eval(args[0]),))

elif cmd == 'current_time':
    if len(args) != 0:
        print('current_time requires 0 args')
        sys.exit(1)
    pp.pprint(client.current_time())

elif cmd == 'is_feature_activated':
    if len(args) != 1:
        print('is_feature_activated requires 1 args')
        sys.exit(1)
    pp.pprint(client.is_feature_activated(args[0],))

elif cmd == 'get_sender':
    if len(args) != 0:
        print('get_sender requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_sender())

elif cmd == 'assert_sha256':
    if len(args) != 2:
        print('assert_sha256 requires 2 args')
        sys.exit(1)
    pp.pprint(client.assert_sha256(args[0], args[1],))

elif cmd == 'assert_sha1':
    if len(args) != 2:
        print('assert_sha1 requires 2 args')
        sys.exit(1)
    pp.pprint(client.assert_sha1(args[0], args[1],))

elif cmd == 'assert_sha512':
    if len(args) != 2:
        print('assert_sha512 requires 2 args')
        sys.exit(1)
    pp.pprint(client.assert_sha512(args[0], args[1],))

elif cmd == 'assert_ripemd160':
    if len(args) != 2:
        print('assert_ripemd160 requires 2 args')
        sys.exit(1)
    pp.pprint(client.assert_ripemd160(args[0], args[1],))

elif cmd == 'sha256':
    if len(args) != 1:
        print('sha256 requires 1 args')
        sys.exit(1)
    pp.pprint(client.sha256(args[0],))

elif cmd == 'sha1':
    if len(args) != 1:
        print('sha1 requires 1 args')
        sys.exit(1)
    pp.pprint(client.sha1(args[0],))

elif cmd == 'sha512':
    if len(args) != 1:
        print('sha512 requires 1 args')
        sys.exit(1)
    pp.pprint(client.sha512(args[0],))

elif cmd == 'ripemd160':
    if len(args) != 1:
        print('ripemd160 requires 1 args')
        sys.exit(1)
    pp.pprint(client.ripemd160(args[0],))

elif cmd == 'recover_key':
    if len(args) != 2:
        print('recover_key requires 2 args')
        sys.exit(1)
    pp.pprint(client.recover_key(args[0], args[1],))

elif cmd == 'assert_recover_key':
    if len(args) != 3:
        print('assert_recover_key requires 3 args')
        sys.exit(1)
    pp.pprint(client.assert_recover_key(args[0], args[1], args[2],))

elif cmd == 'send_deferred':
    if len(args) != 4:
        print('send_deferred requires 4 args')
        sys.exit(1)
    pp.pprint(client.send_deferred(args[0], eval(args[1]), args[2], eval(args[3]),))

elif cmd == 'cancel_deferred':
    if len(args) != 1:
        print('cancel_deferred requires 1 args')
        sys.exit(1)
    pp.pprint(client.cancel_deferred(args[0],))

elif cmd == 'read_transaction':
    if len(args) != 0:
        print('read_transaction requires 0 args')
        sys.exit(1)
    pp.pprint(client.read_transaction())

elif cmd == 'transaction_size':
    if len(args) != 0:
        print('transaction_size requires 0 args')
        sys.exit(1)
    pp.pprint(client.transaction_size())

elif cmd == 'tapos_block_num':
    if len(args) != 0:
        print('tapos_block_num requires 0 args')
        sys.exit(1)
    pp.pprint(client.tapos_block_num())

elif cmd == 'tapos_block_prefix':
    if len(args) != 0:
        print('tapos_block_prefix requires 0 args')
        sys.exit(1)
    pp.pprint(client.tapos_block_prefix())

elif cmd == 'expiration':
    if len(args) != 0:
        print('expiration requires 0 args')
        sys.exit(1)
    pp.pprint(client.expiration())

elif cmd == 'get_action':
    if len(args) != 2:
        print('get_action requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_action(eval(args[0]), eval(args[1]),))

elif cmd == 'get_context_free_data':
    if len(args) != 1:
        print('get_context_free_data requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_context_free_data(eval(args[0]),))

elif cmd == 'db_store_i64':
    if len(args) != 5:
        print('db_store_i64 requires 5 args')
        sys.exit(1)
    pp.pprint(client.db_store_i64(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), args[4],))

elif cmd == 'db_update_i64':
    if len(args) != 3:
        print('db_update_i64 requires 3 args')
        sys.exit(1)
    pp.pprint(client.db_update_i64(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'db_remove_i64':
    if len(args) != 1:
        print('db_remove_i64 requires 1 args')
        sys.exit(1)
    pp.pprint(client.db_remove_i64(eval(args[0]),))

elif cmd == 'db_get_i64':
    if len(args) != 1:
        print('db_get_i64 requires 1 args')
        sys.exit(1)
    pp.pprint(client.db_get_i64(eval(args[0]),))

elif cmd == 'db_next_i64':
    if len(args) != 1:
        print('db_next_i64 requires 1 args')
        sys.exit(1)
    pp.pprint(client.db_next_i64(eval(args[0]),))

elif cmd == 'db_previous_i64':
    if len(args) != 1:
        print('db_previous_i64 requires 1 args')
        sys.exit(1)
    pp.pprint(client.db_previous_i64(eval(args[0]),))

elif cmd == 'db_find_i64':
    if len(args) != 4:
        print('db_find_i64 requires 4 args')
        sys.exit(1)
    pp.pprint(client.db_find_i64(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'db_lowerbound_i64':
    if len(args) != 4:
        print('db_lowerbound_i64 requires 4 args')
        sys.exit(1)
    pp.pprint(client.db_lowerbound_i64(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'db_upperbound_i64':
    if len(args) != 4:
        print('db_upperbound_i64 requires 4 args')
        sys.exit(1)
    pp.pprint(client.db_upperbound_i64(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'db_end_i64':
    if len(args) != 3:
        print('db_end_i64 requires 3 args')
        sys.exit(1)
    pp.pprint(client.db_end_i64(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'db_idx64_store':
    if len(args) != 5:
        print('db_idx64_store requires 5 args')
        sys.exit(1)
    pp.pprint(client.db_idx64_store(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'db_idx64_update':
    if len(args) != 3:
        print('db_idx64_update requires 3 args')
        sys.exit(1)
    pp.pprint(client.db_idx64_update(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'db_idx64_remove':
    if len(args) != 1:
        print('db_idx64_remove requires 1 args')
        sys.exit(1)
    pp.pprint(client.db_idx64_remove(eval(args[0]),))

elif cmd == 'db_idx64_next':
    if len(args) != 1:
        print('db_idx64_next requires 1 args')
        sys.exit(1)
    pp.pprint(client.db_idx64_next(eval(args[0]),))

elif cmd == 'db_idx64_previous':
    if len(args) != 1:
        print('db_idx64_previous requires 1 args')
        sys.exit(1)
    pp.pprint(client.db_idx64_previous(eval(args[0]),))

elif cmd == 'db_idx64_find_primary':
    if len(args) != 4:
        print('db_idx64_find_primary requires 4 args')
        sys.exit(1)
    pp.pprint(client.db_idx64_find_primary(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'db_idx64_find_secondary':
    if len(args) != 4:
        print('db_idx64_find_secondary requires 4 args')
        sys.exit(1)
    pp.pprint(client.db_idx64_find_secondary(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'db_idx64_lowerbound':
    if len(args) != 5:
        print('db_idx64_lowerbound requires 5 args')
        sys.exit(1)
    pp.pprint(client.db_idx64_lowerbound(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'db_idx64_upperbound':
    if len(args) != 5:
        print('db_idx64_upperbound requires 5 args')
        sys.exit(1)
    pp.pprint(client.db_idx64_upperbound(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'db_idx64_end':
    if len(args) != 3:
        print('db_idx64_end requires 3 args')
        sys.exit(1)
    pp.pprint(client.db_idx64_end(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'db_idx128_store':
    if len(args) != 5:
        print('db_idx128_store requires 5 args')
        sys.exit(1)
    pp.pprint(client.db_idx128_store(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), args[4],))

elif cmd == 'db_idx128_update':
    if len(args) != 3:
        print('db_idx128_update requires 3 args')
        sys.exit(1)
    pp.pprint(client.db_idx128_update(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'db_idx128_remove':
    if len(args) != 1:
        print('db_idx128_remove requires 1 args')
        sys.exit(1)
    pp.pprint(client.db_idx128_remove(eval(args[0]),))

elif cmd == 'db_idx128_next':
    if len(args) != 1:
        print('db_idx128_next requires 1 args')
        sys.exit(1)
    pp.pprint(client.db_idx128_next(eval(args[0]),))

elif cmd == 'db_idx128_previous':
    if len(args) != 1:
        print('db_idx128_previous requires 1 args')
        sys.exit(1)
    pp.pprint(client.db_idx128_previous(eval(args[0]),))

elif cmd == 'db_idx128_find_primary':
    if len(args) != 4:
        print('db_idx128_find_primary requires 4 args')
        sys.exit(1)
    pp.pprint(client.db_idx128_find_primary(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'db_idx128_find_secondary':
    if len(args) != 4:
        print('db_idx128_find_secondary requires 4 args')
        sys.exit(1)
    pp.pprint(client.db_idx128_find_secondary(eval(args[0]), eval(args[1]), eval(args[2]), args[3],))

elif cmd == 'db_idx128_lowerbound':
    if len(args) != 5:
        print('db_idx128_lowerbound requires 5 args')
        sys.exit(1)
    pp.pprint(client.db_idx128_lowerbound(eval(args[0]), eval(args[1]), eval(args[2]), args[3], eval(args[4]),))

elif cmd == 'db_idx128_upperbound':
    if len(args) != 5:
        print('db_idx128_upperbound requires 5 args')
        sys.exit(1)
    pp.pprint(client.db_idx128_upperbound(eval(args[0]), eval(args[1]), eval(args[2]), args[3], eval(args[4]),))

elif cmd == 'db_idx128_end':
    if len(args) != 3:
        print('db_idx128_end requires 3 args')
        sys.exit(1)
    pp.pprint(client.db_idx128_end(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'db_idx256_store':
    if len(args) != 5:
        print('db_idx256_store requires 5 args')
        sys.exit(1)
    pp.pprint(client.db_idx256_store(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), args[4],))

elif cmd == 'db_idx256_update':
    if len(args) != 3:
        print('db_idx256_update requires 3 args')
        sys.exit(1)
    pp.pprint(client.db_idx256_update(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'db_idx256_remove':
    if len(args) != 1:
        print('db_idx256_remove requires 1 args')
        sys.exit(1)
    pp.pprint(client.db_idx256_remove(eval(args[0]),))

elif cmd == 'db_idx256_next':
    if len(args) != 1:
        print('db_idx256_next requires 1 args')
        sys.exit(1)
    pp.pprint(client.db_idx256_next(eval(args[0]),))

elif cmd == 'db_idx256_previous':
    if len(args) != 1:
        print('db_idx256_previous requires 1 args')
        sys.exit(1)
    pp.pprint(client.db_idx256_previous(eval(args[0]),))

elif cmd == 'db_idx256_find_primary':
    if len(args) != 4:
        print('db_idx256_find_primary requires 4 args')
        sys.exit(1)
    pp.pprint(client.db_idx256_find_primary(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'db_idx256_find_secondary':
    if len(args) != 4:
        print('db_idx256_find_secondary requires 4 args')
        sys.exit(1)
    pp.pprint(client.db_idx256_find_secondary(eval(args[0]), eval(args[1]), eval(args[2]), args[3],))

elif cmd == 'db_idx256_lowerbound':
    if len(args) != 5:
        print('db_idx256_lowerbound requires 5 args')
        sys.exit(1)
    pp.pprint(client.db_idx256_lowerbound(eval(args[0]), eval(args[1]), eval(args[2]), args[3], eval(args[4]),))

elif cmd == 'db_idx256_upperbound':
    if len(args) != 5:
        print('db_idx256_upperbound requires 5 args')
        sys.exit(1)
    pp.pprint(client.db_idx256_upperbound(eval(args[0]), eval(args[1]), eval(args[2]), args[3], eval(args[4]),))

elif cmd == 'db_idx256_end':
    if len(args) != 3:
        print('db_idx256_end requires 3 args')
        sys.exit(1)
    pp.pprint(client.db_idx256_end(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'db_idx_double_store':
    if len(args) != 5:
        print('db_idx_double_store requires 5 args')
        sys.exit(1)
    pp.pprint(client.db_idx_double_store(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), args[4],))

elif cmd == 'db_idx_double_update':
    if len(args) != 3:
        print('db_idx_double_update requires 3 args')
        sys.exit(1)
    pp.pprint(client.db_idx_double_update(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'db_idx_double_remove':
    if len(args) != 1:
        print('db_idx_double_remove requires 1 args')
        sys.exit(1)
    pp.pprint(client.db_idx_double_remove(eval(args[0]),))

elif cmd == 'db_idx_double_next':
    if len(args) != 1:
        print('db_idx_double_next requires 1 args')
        sys.exit(1)
    pp.pprint(client.db_idx_double_next(eval(args[0]),))

elif cmd == 'db_idx_double_previous':
    if len(args) != 1:
        print('db_idx_double_previous requires 1 args')
        sys.exit(1)
    pp.pprint(client.db_idx_double_previous(eval(args[0]),))

elif cmd == 'db_idx_double_find_primary':
    if len(args) != 4:
        print('db_idx_double_find_primary requires 4 args')
        sys.exit(1)
    pp.pprint(client.db_idx_double_find_primary(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'db_idx_double_find_secondary':
    if len(args) != 4:
        print('db_idx_double_find_secondary requires 4 args')
        sys.exit(1)
    pp.pprint(client.db_idx_double_find_secondary(eval(args[0]), eval(args[1]), eval(args[2]), args[3],))

elif cmd == 'db_idx_double_lowerbound':
    if len(args) != 5:
        print('db_idx_double_lowerbound requires 5 args')
        sys.exit(1)
    pp.pprint(client.db_idx_double_lowerbound(eval(args[0]), eval(args[1]), eval(args[2]), args[3], eval(args[4]),))

elif cmd == 'db_idx_double_upperbound':
    if len(args) != 5:
        print('db_idx_double_upperbound requires 5 args')
        sys.exit(1)
    pp.pprint(client.db_idx_double_upperbound(eval(args[0]), eval(args[1]), eval(args[2]), args[3], eval(args[4]),))

elif cmd == 'db_idx_double_end':
    if len(args) != 3:
        print('db_idx_double_end requires 3 args')
        sys.exit(1)
    pp.pprint(client.db_idx_double_end(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'db_idx_long_double_store':
    if len(args) != 5:
        print('db_idx_long_double_store requires 5 args')
        sys.exit(1)
    pp.pprint(client.db_idx_long_double_store(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), args[4],))

elif cmd == 'db_idx_long_double_update':
    if len(args) != 3:
        print('db_idx_long_double_update requires 3 args')
        sys.exit(1)
    pp.pprint(client.db_idx_long_double_update(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'db_idx_long_double_remove':
    if len(args) != 1:
        print('db_idx_long_double_remove requires 1 args')
        sys.exit(1)
    pp.pprint(client.db_idx_long_double_remove(eval(args[0]),))

elif cmd == 'db_idx_long_double_next':
    if len(args) != 1:
        print('db_idx_long_double_next requires 1 args')
        sys.exit(1)
    pp.pprint(client.db_idx_long_double_next(eval(args[0]),))

elif cmd == 'db_idx_long_double_previous':
    if len(args) != 1:
        print('db_idx_long_double_previous requires 1 args')
        sys.exit(1)
    pp.pprint(client.db_idx_long_double_previous(eval(args[0]),))

elif cmd == 'db_idx_long_double_find_primary':
    if len(args) != 4:
        print('db_idx_long_double_find_primary requires 4 args')
        sys.exit(1)
    pp.pprint(client.db_idx_long_double_find_primary(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'db_idx_long_double_find_secondary':
    if len(args) != 4:
        print('db_idx_long_double_find_secondary requires 4 args')
        sys.exit(1)
    pp.pprint(client.db_idx_long_double_find_secondary(eval(args[0]), eval(args[1]), eval(args[2]), args[3],))

elif cmd == 'db_idx_long_double_lowerbound':
    if len(args) != 5:
        print('db_idx_long_double_lowerbound requires 5 args')
        sys.exit(1)
    pp.pprint(client.db_idx_long_double_lowerbound(eval(args[0]), eval(args[1]), eval(args[2]), args[3], eval(args[4]),))

elif cmd == 'db_idx_long_double_upperbound':
    if len(args) != 5:
        print('db_idx_long_double_upperbound requires 5 args')
        sys.exit(1)
    pp.pprint(client.db_idx_long_double_upperbound(eval(args[0]), eval(args[1]), eval(args[2]), args[3], eval(args[4]),))

elif cmd == 'db_idx_long_double_end':
    if len(args) != 3:
        print('db_idx_long_double_end requires 3 args')
        sys.exit(1)
    pp.pprint(client.db_idx_long_double_end(eval(args[0]), eval(args[1]), eval(args[2]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
